dt_ <- read.csv("C:\Users\tillera\Downloads\training.csv")
dt_ <- read.csv("C:/Users/tillera/Downloads/training.csv")
str(dt_)
hist(dt_$id)
View(dt_)
tr_ <- subset(dt_,select=-c("id"))
tr_ <- dt[,-c("id")]
tr_ <- dt[,!c("id")]
tr_ <- dt[,-1]
tr_ <- dt)[,-1]
tr_ <- dt_[,-1]
View(tr_)
myModel <- lm(data = tr_,price~.)
View(dt_)
dt2_ <-  read.csv("C:/Users/tillera/Downloads/dev.csv")
ts_y <- dt2_[,2]
ts_y <- as.data.frame(dt2_[,2])
View(ts_y)
colnames(ts_y) <- "price"
View(ts_y)
ts_x <- dt2_[,-c(1,2)]
ts_y$prediction <- predict(myModel,ts_x)
View(ts_y)
plot(ts_y)
rmse(ts_y$price,ts_y$prediction)
sqrt( sum( (ts_y$prediction - ts_y$price)^2 , na.rm = TRUE ) / nrow(ts_y) )
dt_ <- read.csv("H:/26.0 Commercial Reporting/1. RT Pipeline/2016/AT - Account Credits 0x1bfaa1d34e5e246d/withGLACode_temp.csv")
View(dt_)
str(dt_)
x_ <- dt_[dt_$GLACCOUNTCODE >= 4212041001,]
View(x_)
x_ <- dt_[dt_$GLACCOUNTCODE == 4212041001,]
?rda
??rda
oct(31)
159.11+74.03
74.54+29.63
85.27-66.6
359+271
randu(1)
runif(1,2)
?runif
runif(c(1,2),1)
runif(1,c(1,2))
runif(1,c(1,2))
runif(1,c(1,2))
runif(1,c(1,2))
runif(1,c(1,3))
runif(1,c(1,3))
runif(2,1)
runif(2,1,2)
runif(1,1,2)
runif(1,-1,1)
Rcpp::sourceCpp('my.cpp')
1-0.0013
1/1300
*5
(1/1300)*5
1 - ((1/1300)*5)
1/1300
1-(1/1300)
1-(5/1300)
(2*1)+(-1*-0.5)+(1*0)+0.5
1/1+e^(3)
1/(1 + exp(3))
(2)+(-1*-0.5)
+0.5
(3-1)^2
/2
28*28.
con <- odbcConnect("160.206.12.86",uid = "ecc",pwd = "ecc1152")
odbcGetInfo(con)
# sqlTables(con, schema="ECC")
dataFrame <- sqlQuery(con,
"SELECT * FROM ECC.AT_PROD_CODE_MET_VICSA_FEB17")
require(RODBC)
con <- odbcConnect("160.206.12.86",uid = "ecc",pwd = "ecc1152")
odbcGetInfo(con)
# sqlTables(con, schema="ECC")
dataFrame <- sqlQuery(con,
"SELECT * FROM ECC.AT_PROD_CODE_MET_VICSA_FEB17")
View(dataFrame)
shiny::runApp('ShinySMS')
runApp('ShinySMS')
shiny::runApp('ShinySMS')
runApp('ShinySMS')
require(RODBC)
dbh <- odbcDriverConnect('driver = {SQL Server};server=azr-sqldw1-svr.crux.infra.com;database=SANDPIT_REPORTING;trusted_connection=true')
dbh <- odbcDriverConnect('EDW')
dbh <- odbcDriverConnect('driver = {SQL Server};server=EDW;database=SANDPIT_REPORTING;trusted_connection=true')
dbh <- odbcConnect("EDW")
d_ <- sqlQuery("SELECT * FROM ADM_RT.SMS_NOTIFY_CUSTOMERS")
d_ <- sqlQuery(dbh,"SELECT * FROM ADM_RT.SMS_NOTIFY_CUSTOMERS")
close(dbh)
require(plotly)
data <- aggregate(d_$NotifiedDate ~ d_$CustomerID,sum)
data <- aggregate(d_, NotifiedDate ~ CustomerID,sum)
data <- aggregate(d_, by = list(NotifiedDate,CustomerID),FUN = sum)
data <- aggregate(d_, by = list(NotfiedDate,CustomerID),FUN = sum)
data_ <- aggregate(mtcars,by=list(cyl,vs),FUN = mean,na.rm = TRUE)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = d_, FUN = sum)
View(data_)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = d_, FUN = count.fields)
require(plyr)
data_ <- count(d_,c('NotifiedDate','CustomerID'))
View(data_)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = data_, FUN = count.fields)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = data_, FUN = sum)
View(data_)
data_ <- count(d_,c('NotifiedDate','CustomerID'))
data_ <- aggregate(freq ~ NotifiedDate, data = data_, FUN = sum)
View(data_)
plot_ly(data_, x = NotifiedDate, y = freq, mode = 'lines')
plot_ly(x = data_$NotifiedDate, y = data_$freq, mode = 'lines')
plot_ly(x = data_$NotifiedDate, y = data_$freq, mode = 'lines', type ='scatter')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
dbh <- odbcConnect("EDW")
d_ <- sqlQuery(dbh,"SELECT COUNT(CustomerID) AS SMSCOUNT,CAST(NotifiedDate AS DATE) AS SMSDATE FROM ADM_RT.SMS_NOTIFY_CUSTOMERS
d_ <- sqlQuery(dbh,"SELECT COUNT(CustomerID) AS SMSCOUNT,CAST(NotifiedDate AS DATE) AS SMSDATE FROM ADM_RT.SMS_NOTIFY_CUSTOMERS GROUP BY CAST(NotifiedDate AS DATE)")
View(d_)
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
?box
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
sqrt((3*3)+(2*2))
shiny::runApp('ShinySMS')
shiny::runApp('ShinySMS')
shiny::runApp('ShinySMS')
library(lubridate)
x <- ymd_hms("2013-09-09 07:05:00")
y <- ymd_hms("2013-09-09 07:05:00")
x - y
y <- ymd_hms("2013-09-09 07:05:01")
x - y
days(ymd_hms("2013-09-09 07:05:00"))
library(lubridate)
x <- ymd("15/03/2017")
x <- ymd("2017-03-15")
y <- ymd("2017-02-19")
x - y
x <- ymd("2017-03-14")
y <- ymd("2017-02-26")
x-y
x <- ymd("2017-03-13")
x - y
y <- ymd("2017-02-28")
x - y
x <- ymd("2017-03-15")
x - y
78000000 * 48
205357604
205357604/(78000000 * 48)
?cdf
??cdf
dt <- read.csv("C:\\Users\\tillera\\Documents\\FIT5147\\FIT5147A3\\a1_data_melted.csv")
vec_ <- dt$value
quantile(vec_)
narm_ <- complete.cases(vec_)
narm_ <- vec_[complete.cases(vec_)]
quantile(narm_)
plot(narm_)
plot(ecdf(narm_))
density(narm_)
plot(density(narm_))
require(ggplot2)
ggplotly(plot(density(narm_)))
setwd("~/FIT5147/FIT5147A3/task2")
list.files()
install.packages('readxl')
require(readxl)
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
View(orig_)
shape(orig_)
dim(orig_)
View(orig_)
head(orig_)
View(orig_)
cln_ <- orig_[1:9,1:14]
View(cln_)
cln_ <- cln_[,-13]
View(cln_)
View(cln_)
require(ggplot2)
View(orig_)
View(cln_)
View(cln_)
head(cln_)
?melt
require(reshape2)
?melt
pop_ <- cln_[,1:12]
View(orig_)
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
# Look at the sahpe
dim(orig_)
# clearly too big. Look at the head
head(orig_)
# Hmm looks like a lot of NA columns as well as two additional rows.
# Lets get rid of them.
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
View(cln_)
View(pop_)
print(x <- 2 +3 )
pop_melt <- melt(pop_)
View(pop_melt)
ggplot(pop_melt,aes(x=pop_melt$variable,y=pop_melt$value)) + geom_point()
ggplot(pop_melt,aes(x=pop_melt$variable,y=pop_melt$value)) + geom_line()
?transpose
??transpose
t(pop_)
pop_t <- t(pop_)
pop_melt <- melt(pop_t)
View(pop_melt)
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
pop_melt <- melt(pop_t)
View(pop_melt)
pop_ <- cln_[,1:12]
pop_melt <- melt(pop_)
View(pop_melt)
View(pop_melt)
pop_melt <- melt(pop_melt, id='variable')
View(pop_melt)
pop_melt <- melt(pop_)
View(pop_melt)
pop_melt <- melt(pop_,id='index')
View(pop_t)
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
View(pop_t)
View(pop_t)
pop_melt <- melt(pop_)
View(pop_melt)
pop_melt <- melt(pop_t)
View(pop_t)
View(pop_melt)
View(pop_t)
View(pop_melt)
colnames(pop_melt) <- c("YEAR","GEO_GROUP","POPULATION")
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION)) + geom_line()
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_line()
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_point()
View(pop_t)
View(pop_melt)
View(pop_melt)
pop_melt$POPULATION <- as.numeric(pop_melt$POPULATION)
View(pop_melt)
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_melt <- melt(pop_t)
colnames(pop_melt) <- c("YEAR","GEO_GROUP","POPULATION")
View(pop_melt)
levels(pop_melt$POPULATION)
pop_melt$POPULATION <- as.character(pop_melt$POPULATION)
pop_melt$POPULATION <- trimws(pop_melt$POPULATION)
pop_melt$POPULATION <- as.numeric(pop_melt$POPULATION)
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_point()
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_line()
pop_melt <- pop_melt[pop_melt$GEO_GROUP != 'TOTAL AUSTRALIA',]
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_line()
ggplot(pop_melt,aes(x=pop_melt$YEAR,y=log(pop_melt$POPULATION),color=pop_melt$GEO_GROUP)) + geom_line()
require(plotly)
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=log(pop_melt$POPULATION),color=pop_melt$GEO_GROUP)) + geom_line())
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=log(pop_melt$POPULATION),color=pop_melt$GEO_GROUP)) + geom_point())
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=log(pop_melt$POPULATION),color=pop_melt$GEO_GROUP)) + geom_point() + geom_abline())
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=log(pop_melt$POPULATION),color=pop_melt$GEO_GROUP)) + geom_point())
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_point())
