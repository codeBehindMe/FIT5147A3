require(readxl)
require(ggplot2)
require(reshape2)
require(plotly)
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
dim(orig_)
head(orig_)
cln_ <- orig_[1:9,1:14]
cln_ <- cln_[,-13]
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_melt <- melt(pop_t)
colnames(pop_melt) <- c("YEAR","GEO_GROUP","POPULATION")
View(pop_melt)
install.packages("maptools")
require(maptools)
area_ <- readShapePoly("./AU-Shapefile/AUS_adm1.shp")
require(RColorBrewer)
clrs_ <- brewer.pal(9,"BuGn")
require(ggmap)
mapImage <- get_map(location = "Australia",color = "color")
mapImage
?ggmap
ggmap(mapImage)
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
install.packages("devtools")
require(devtools)
devtools::install_github("dkahle/ggmap")
ggmap(mapimage)
ggmap(mapImage)
require(ggmap)
library(ggmap)
install.packages("digest")
install.packages("digest")
devtools::install_github("dkahle/ggmap")
require(maptools)
require(RColorBrewer)
require(ggmap)
area_ <- readShapePoly("./AU-Shapefile/AUS_adm1.shp")
clrs_ <- brewer.pal(9,"BuGn")
mapImage <- get_map(location = "Australia",color = "color")
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "osm",zoom =6)
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "dsk",zoom =6)
mapImage <- get_map(location = "Australia",color = "color",source = "google",zoom =6)
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "google")
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "google", zoom = 0)
mapImage <- get_map(location = "Australia",color = "color",source = "google", zoom = 1)
ggmap(mapImage)
mapImage <- get_map(location = "Victoria,Australia",color = "color",source = "google", zoom = 5)
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "google", zoom = 5)
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "google", zoom = 3)
ggmap(mapImage)
mapImage <- get_map(location = "Australia",color = "color",source = "google", zoom = 4)
ggmap(mapImage)
View(orig_)
shiny::runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
require(readxl)
require(ggplot2)
require(reshape2)
require(plotly)
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
# Look at the sahpe
dim(orig_)
# clearly too big. Look at the head
head(orig_)
# Hmm looks like a lot of NA columns as well as two additional rows.
# Lets get rid of them.
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
# Lets transform and reshape the data to something that we can work with.
pop_t <- t(pop_)
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_melt <- melt(pop_t)
colnames(pop_melt) <- c("YEAR","GEO_GROUP","POPULATION")
pop_melt$POPULATION <- as.character(pop_melt$POPULATION)
pop_melt$POPULATION <- trimws(pop_melt$POPULATION)
pop_melt$POPULATION <- as.numeric(pop_melt$POPULATION)
# Subset out the australian population.
pop_melt <- pop_melt[pop_melt$GEO_GROUP != 'TOTAL AUSTRALIA',]
View(cln_)
View(cln_)
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_point())
ggplotly(ggplot(pop_melt,aes(x=pop_melt$YEAR,y=pop_melt$POPULATION,color=pop_melt$GEO_GROUP)) + geom_line())
runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
source('~/FIT5147/FIT5147A3/task2/script_001.R', echo=TRUE)
cln_ <- orig_[1:9,1:14]
cln_ <- cln_[,-13]
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_melt <- melt(pop_t)
colnames(pop_melt) <- c("YEAR","GEO_GROUP","POPULATION")
pop_melt$POPULATION <- as.character(pop_melt$POPULATION)
pop_melt$POPULATION <- trimws(pop_melt$POPULATION)
pop_melt$POPULATION <- as.numeric(pop_melt$POPULATION)
pop_melt <- pop_melt[pop_melt$GEO_GROUP != 'TOTAL AUSTRALIA',]
View(cln_)
t(cln_)
View(cln_)
View(pop_t)
View(pop_)
View(pop_t)
runApp('A2Task2AusPopData')
pop_t[,1]
pop_t[,2]
rownames(pop_t) <- NULL
View(pop_t)
runApp('A2Task2AusPopData')
View(orig_)
orig_[,0]
as.data.frame(orig_)
as.data.frame(orig_)[,0]
as.data.frame(orig_)[,1]
cln_[,1]
as.character(cln_[,1])
as.vector(cln_[,1])
as.data.frame(cln_[,1])
dim(as.data.frame(cln_[,1]))
as.matrix(as.data.frame(cln_[,1])
)
runApp('A2Task2AusPopData')
getStates <- function(includeTotal=TRUE){
# This returns a data frame of states.
rig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
state_ <- as.data.frame(cln[,1])
colnames(state_) <- NULL
if(includeTotal){
return (state_)
} else{
return(state_[-nrow(state),])
}
}
getStates()
getStates <- function(includeTotal=TRUE){
# This returns a data frame of states.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
state_ <- as.data.frame(cln[,1])
colnames(state_) <- NULL
if(includeTotal){
return (state_)
} else{
return(state_[-nrow(state),])
}
}
getStates()
getStates <- function(includeTotal=TRUE){
# This returns a data frame of states.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
state_ <- as.data.frame(cln_[,1])
colnames(state_) <- NULL
if(includeTotal){
return (state_)
} else{
return(state_[-nrow(state),])
}
}
getStates()
getStates()[1]
getStates()[0]
getStates()[,1]
runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
getStates <- function(includeTotal=TRUE){
# This returns a data frame of states.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
state_ <- as.data.frame(cln_[,1])
colnames(state_) <- NULL
if(includeTotal){
return (state_)
} else{
return(state_[-nrow(state),])
}
}
states_ <- getStates()
View(states_)
getStates <- function(includeTotal=TRUE){
# This returns a data frame of states.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
state_ <- as.data.frame(cln_[,1])
# colnames(state_) <- NULL
if(includeTotal){
return (state_)
} else{
return(state_[-nrow(state),])
}
}
states_ <- getStates()
View(getStates)
View(states_)
runApp('A2Task2AusPopData')
runApp('A2Task2AusPopData')
getTimeSeriesData <- function(){
# This function gets the population data from the original file and reformats it in a way that's suitable for a line plot.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
# Lets transform and reshape the data to something that we can work with.
pop_t <- t(pop_)
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_melt <- melt(pop_t)
colnames(pop_melt) <- c("YEAR","GEO_GROUP","POPULATION")
pop_melt$POPULATION <- as.character(pop_melt$POPULATION)
pop_melt$POPULATION <- trimws(pop_melt$POPULATION)
pop_melt$POPULATION <- as.numeric(pop_melt$POPULATION)
# Subset out the australian population.
pop_melt <- pop_melt[pop_melt$GEO_GROUP != 'TOTAL AUSTRALIA',]
return (pop_melt)
}
getScatterPlotData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
rownames(pop_t) <- NULL
return (pop_t)
}
scatterData <- getScatterPlotData()
scatterData[,"New South Wales"]
View(scatterData)
getScatterPlotData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
rownames(pop_t) <- NULL
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
return (pop_t)
}
scatterData <- getScatterPlotData()
View(scatterData)
getScatterPlotData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
rownames(pop_t) <- NULL
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
return (as.data.frame(pop_t))
}
scatterData <- getScatterPlotData()
View(scatterData)
scatterData[,"New South Wales"]
View(states_)
View(scatterData)
as.numeric(scatterData)
as.numeric(scatterData$`New South Wales`)
as.character(scatterData)
as.character(scatterData$`New South Wales`)
sapply(scatterData,X = [,1:ncol(scatterData)],as.character)
sapply(scatterData,X = scatterData[,1:ncol(scatterData)],as.character)
class(scatterData))
class(scatterData)
apply(scatterData,2,as.numeric)
getScatterPlotData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
rownames(pop_t) <- NULL
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_t <- as.data.frame(pop_t)
pop_t <- apply(pop_t,2,as.numeric)
return (pop_t)
}
scatterData <- getScatterPlotData()
View(scatterData)
getScatterPlotData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
rownames(pop_t) <- NULL
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_t <- apply(pop_t,2,as.numeric)
pop_t <- as.data.frame(pop_t)
return (pop_t)
}
scatterData <- getScatterPlotData()
View(scatterData)
scatterData[,"New South wales"]
scatterData[,"New South Wales"]
runApp('A2Task2AusPopData')
plot_ly(data = scatterData,y = scatterData[,"New South Wales"],x = scatterData[,"Victoria"])
runApp('A2Task2AusPopData')
getScatterPlotData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
rownames(pop_t) <- NULL
colnames(pop_t) <- pop_t[1,]
pop_t <- pop_t[-1,]
pop_t <- apply(pop_t,2,as.numeric)
pop_t <- as.data.frame(pop_t)
return (pop_t)
}
scatterData <- getScatterPlotData()
View(scatterData)
data_ <- getScatterPlotData()
plot_ly(data = data_, y=data_[,input$SInputYAxis],x=data_[,input$SInputXAxis],mode='markers')
plot_ly(data = data_, y=data_[,1],x=data_[,2],mode='markers')
runApp('A2Task2AusPopData')
fit_ <- lm(data = data_, x = data_[,"New South Wales"], y = data_["Victoria"])
fit_ <- lm( x = data_[,"New South Wales"], y = data_["Victoria"])
data_[,"New South Wales"]
data_["Victoria"]
class(data_["New South Wales"])
class(data_[,"New South Wales"])
class(data_["Victoria"])
class(data_[,"Victoria"])
lm( x = data_[,"New South Wales"], y = data_["Victoria"])
lm( x = data_[,"New South Wales"], y = data_[,"Victoria"])
lm(data_[,"New South Wales"] ~ data_[,"Victoria"])
runApp('A2Task2AusPopData')
fit_ <- lm(data_[,"New South Wales"] ~ data_[,"Victoria"])
plot_ly(data = data_, y=data_[,"New South Wales"],x=data_[,"Victoria"],mode='markers')
plot_ly(data = data_, y=data_[,"New South Wales"],x=data_[,"Victoria"],mode='markers', trace = "scatter")
plot_ly(data = data_, y=data_[,"New South Wales"],x=data_[,"Victoria"],mode='markers') %>% add_trace (data = data_, x = data_[,"Victoria"], y = fitted(fit_), mode = "lines")
plot_ly(data = data_, y=data_[,"New South Wales"],x=data_[,"Victoria"],mode='markers',type="scatter") %>% add_trace (data = data_, x = data_[,"Victoria"], y = fitted(fit_), mode = "lines")
runApp('A2Task2AusPopData')
summary(fit_)
summary(fit_)[1]
summary(fit_)[2]
summary(fit_)$r.squared
runApp('A2Task2AusPopData')
orig_ <- readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
# Look at the sahpe
dim(orig_)
# clearly too big. Look at the head
head(orig_)
# Hmm looks like a lot of NA columns as well as two additional rows.
# Lets get rid of them.
cln_ <- orig_[1:9,1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[,-13]
View(cln_)
pop_ <- cln_[,1:12]
pop_t <- t(pop_)
View(pop_t)
View(pop_t)
View(pop_t)
runApp('A2Task2AusPopData')
getTimeSeriesScatterData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- add_rownames(pop_t,"YEAR")
rownames(pop_t) <- NULL
colnames(pop_t) <- pop_t[1, ]
pop_t <- pop_t[-1, ]
pop_t <- apply(pop_t, 2, as.numeric)
pop_t <- as.data.frame(pop_t)
}
data_ <- getTimeSeriesScatterData()
require(dplyr)
data_ <- getTimeSeriesScatterData()
?rownames_to_column
View(data_)
View(data_)
getTimeSeriesScatterData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- tibble::rownames_to_column(pop_t,"YEAR")
colnames(pop_t) <- pop_t[1, ]
pop_t <- pop_t[-1, ]
pop_t <- apply(pop_t, 2, as.numeric)
pop_t <- as.data.frame(pop_t)
}
data_ <- getTimeSeriesScatterData()
getTimeSeriesScatterData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- tibble::rownames_to_column(as.data.frame(pop_t),"YEAR")
colnames(pop_t) <- pop_t[1, ]
pop_t <- pop_t[-1, ]
pop_t <- apply(pop_t, 2, as.numeric)
pop_t <- as.data.frame(pop_t)
}
data_ <- getTimeSeriesScatterData()
View(data_)
getTimeSeriesScatterData
getTimeSeriesScatterData <- function(){
# This function gets data from the origian file and structures it in a way that can be scatter plotted.
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- tibble::rownames_to_column(as.data.frame(pop_t),"YEAR")
# colnames(pop_t) <- pop_t[1, ]
# pop_t <- pop_t[-1, ]
pop_t <- apply(pop_t, 2, as.numeric)
pop_t <- as.data.frame(pop_t)
}
data_ <- getTimeSeriesScatterData()
View(data_)
View(pop_)
View(pop_t)
as.data.frame(pop_t)
