rmse(ts_y$price,ts_y$prediction)
sqrt( sum( (ts_y$prediction - ts_y$price)^2 , na.rm = TRUE ) / nrow(ts_y) )
dt_ <- read.csv("H:/26.0 Commercial Reporting/1. RT Pipeline/2016/AT - Account Credits 0x1bfaa1d34e5e246d/withGLACode_temp.csv")
View(dt_)
str(dt_)
x_ <- dt_[dt_$GLACCOUNTCODE >= 4212041001,]
View(x_)
x_ <- dt_[dt_$GLACCOUNTCODE == 4212041001,]
?rda
??rda
oct(31)
159.11+74.03
74.54+29.63
85.27-66.6
359+271
randu(1)
runif(1,2)
?runif
runif(c(1,2),1)
runif(1,c(1,2))
runif(1,c(1,2))
runif(1,c(1,2))
runif(1,c(1,2))
runif(1,c(1,3))
runif(1,c(1,3))
runif(2,1)
runif(2,1,2)
runif(1,1,2)
runif(1,-1,1)
Rcpp::sourceCpp('my.cpp')
1-0.0013
1/1300
*5
(1/1300)*5
1 - ((1/1300)*5)
1/1300
1-(1/1300)
1-(5/1300)
(2*1)+(-1*-0.5)+(1*0)+0.5
1/1+e^(3)
1/(1 + exp(3))
(2)+(-1*-0.5)
+0.5
(3-1)^2
/2
28*28.
con <- odbcConnect("160.206.12.86",uid = "ecc",pwd = "ecc1152")
odbcGetInfo(con)
# sqlTables(con, schema="ECC")
dataFrame <- sqlQuery(con,
"SELECT * FROM ECC.AT_PROD_CODE_MET_VICSA_FEB17")
require(RODBC)
con <- odbcConnect("160.206.12.86",uid = "ecc",pwd = "ecc1152")
odbcGetInfo(con)
# sqlTables(con, schema="ECC")
dataFrame <- sqlQuery(con,
"SELECT * FROM ECC.AT_PROD_CODE_MET_VICSA_FEB17")
View(dataFrame)
shiny::runApp('ShinySMS')
runApp('ShinySMS')
shiny::runApp('ShinySMS')
runApp('ShinySMS')
require(RODBC)
dbh <- odbcDriverConnect('driver = {SQL Server};server=azr-sqldw1-svr.crux.infra.com;database=SANDPIT_REPORTING;trusted_connection=true')
dbh <- odbcDriverConnect('EDW')
dbh <- odbcDriverConnect('driver = {SQL Server};server=EDW;database=SANDPIT_REPORTING;trusted_connection=true')
dbh <- odbcConnect("EDW")
d_ <- sqlQuery("SELECT * FROM ADM_RT.SMS_NOTIFY_CUSTOMERS")
d_ <- sqlQuery(dbh,"SELECT * FROM ADM_RT.SMS_NOTIFY_CUSTOMERS")
close(dbh)
require(plotly)
data <- aggregate(d_$NotifiedDate ~ d_$CustomerID,sum)
data <- aggregate(d_, NotifiedDate ~ CustomerID,sum)
data <- aggregate(d_, by = list(NotifiedDate,CustomerID),FUN = sum)
data <- aggregate(d_, by = list(NotfiedDate,CustomerID),FUN = sum)
data_ <- aggregate(mtcars,by=list(cyl,vs),FUN = mean,na.rm = TRUE)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = d_, FUN = sum)
View(data_)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = d_, FUN = count.fields)
require(plyr)
data_ <- count(d_,c('NotifiedDate','CustomerID'))
View(data_)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = data_, FUN = count.fields)
data_ <- aggregate(CustomerID ~ NotifiedDate, data = data_, FUN = sum)
View(data_)
data_ <- count(d_,c('NotifiedDate','CustomerID'))
data_ <- aggregate(freq ~ NotifiedDate, data = data_, FUN = sum)
View(data_)
plot_ly(data_, x = NotifiedDate, y = freq, mode = 'lines')
plot_ly(x = data_$NotifiedDate, y = data_$freq, mode = 'lines')
plot_ly(x = data_$NotifiedDate, y = data_$freq, mode = 'lines', type ='scatter')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
dbh <- odbcConnect("EDW")
d_ <- sqlQuery(dbh,"SELECT COUNT(CustomerID) AS SMSCOUNT,CAST(NotifiedDate AS DATE) AS SMSDATE FROM ADM_RT.SMS_NOTIFY_CUSTOMERS
d_ <- sqlQuery(dbh,"SELECT COUNT(CustomerID) AS SMSCOUNT,CAST(NotifiedDate AS DATE) AS SMSDATE FROM ADM_RT.SMS_NOTIFY_CUSTOMERS GROUP BY CAST(NotifiedDate AS DATE)")
View(d_)
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
?box
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
runApp('ShinySMS')
sqrt((3*3)+(2*2))
shiny::runApp('ShinySMS')
shiny::runApp('ShinySMS')
shiny::runApp('ShinySMS')
library(lubridate)
x <- ymd_hms("2013-09-09 07:05:00")
y <- ymd_hms("2013-09-09 07:05:00")
x - y
y <- ymd_hms("2013-09-09 07:05:01")
x - y
days(ymd_hms("2013-09-09 07:05:00"))
library(lubridate)
x <- ymd("15/03/2017")
x <- ymd("2017-03-15")
y <- ymd("2017-02-19")
x - y
x <- ymd("2017-03-14")
y <- ymd("2017-02-26")
x-y
x <- ymd("2017-03-13")
x - y
y <- ymd("2017-02-28")
x - y
x <- ymd("2017-03-15")
x - y
78000000 * 48
205357604
205357604/(78000000 * 48)
?cdf
??cdf
dt <- read.csv("C:\\Users\\tillera\\Documents\\FIT5147\\FIT5147A3\\a1_data_melted.csv")
vec_ <- dt$value
quantile(vec_)
narm_ <- complete.cases(vec_)
narm_ <- vec_[complete.cases(vec_)]
quantile(narm_)
plot(narm_)
plot(ecdf(narm_))
density(narm_)
plot(density(narm_))
require(ggplot2)
ggplotly(plot(density(narm_)))
getTimeSeriesData <- function() {
s
shiny::runApp('FIT5147/FIT5147A3/task2/A2Task2AusPopData')
data_ <- getTimeSeriesScatterData()
setwd("~/FIT5147/FIT5147A3/task2/A2Task2AusPopData")
data_ <- getTimeSeriesScatterData()
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- as.data.frame(pop_t)
View(pop_t)
as.vector(unlist(pop_t[1,]))
pop_t <- tibble::rownames_to_column(as.data.frame(pop_t),"YEAR")
View(pop_t)
colnames(pop_t) <- as.character(unlist(pop_t[1,]))
View(pop_t)
colnames(pop_t) <- as.vector(unlist(pop_t[1,]))
View(pop_t)
as.vector(unlist(pop_t[1,])
)
as.vector(unlist(pop_t[2,]))
as.vector(unlist(pop_t[1,])[2])
as.vector(unlist(pop_t[1,])).
as.vector(unlist(pop_t[1,]))
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- as.data.frame(pop_t)
as.vector(unlist(pop_t[1,]))
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- c("YEAR",as.data.frame(pop_t))
cNames <- as.vector(unlist(pop_t[1,]))
pop_t <- tibble::rownames_to_column(as.data.frame(pop_t),"YEAR")
colnames(pop_t) <- cNames
# colnames(pop_t)[1] <- "YEAR"
pop_t <- pop_t[-1, ]
View(pop_t)
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- c("YEAR",as.data.frame(pop_t))
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- as.data.frame(pop_t)
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
pop_t <- t(pop_)
pop_t <- as.data.frame(pop_t)
cNames <- c("YEAR",as.vector(unlist(pop_t[1,])))
pop_t <- tibble::rownames_to_column(as.data.frame(pop_t),"YEAR")
View(pop_t)
colnames(pop_t) <- cNames
View(pop_t)
pop_t <- pop_t[-1, ]
View(pop_t)
runApp()
runApp()
require(ployly)
require(plotly)
plot_geo(data = pop_t, 'australia')
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
p
)
l_ <- list(color = toRGB("white"), width = 2 )
g_ <- list(
scope='usa'
)
View(df)
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:12]
View(pop_)
View(df)
View(pop_)
pop_ <- cln_[, 1:13]
View(pop_)
View(pop_)
pop_ <- cln[,1:12]/cln_[,13]
cln_[,1:12]/cln_[,13]
cln_[,1:12] * cln_[,13]
sweep(cln_[,1:12], MARGIN = 2 ,cln_[,13], FUN = "/")
cln_[,13]/cln_[,13]
cln_[,1:12]
cln_[,2:12]
View(pop_)
sweep(cln_[,2:12], MARGIN = 2 ,cln_[,13], FUN = "/")
sweep(cln_[,2:12], MARGIN = 1 ,cln_[,13], FUN = "/")
sweep(as.matrix(cln_[,2:12]), MARGIN = 2 ,as.vector(cln_[,13]), FUN = "/")
as.matrx(cln_[,2:12])
as.matrix(cln_[,2:12])
as.vector(cln_[,13])
as.vector(unlist(cln_[,13]))
as.matrix(unlist(cln_[,2:12]))
sweep(as.matrix(cln_[,2:12]),MARGIN = 2,as.vector(unlist(cln_[,13])),FUN = "/")
pop_t <- sweep(as.matrix(cln_[,2:12]),MARGIN = 2,as.vector(unlist(cln_[,13])),FUN = "/")
View(pop_t)
pop_mtx <- as.data.frame(pop_mtx)
pop_mtx <- sweep(as.matrix(cln_[,2:12]),MARGIN = 2,as.vector(unlist(cln_[,13])),FUN = "/")
pop_mtx <- as.data.frame(pop_mtx)
View(pop_mtx)
View(pop_)
pop_t <- cbind(pop_[,1],pop_mtx)
View(pop_t)
packageVersion('plotly')
??projection
plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
colnames(pop_t)[1] <- "STATE"
??sql
??seq
?seq
colnames(pop_t)[1] <- c("STATE",seq(2005,2015,1)
colnames(pop_t)[1] <- c("STATE",seq(2005,2015,1))
seq(2005, 2015, 1)
c("STATE", seq(2005, 2015, 1))
colnames(pop_t) <- c("STATE",seq(2005,2015,1))
plot_geo(pop_t, locationmode = 'australia') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
plot_geo(pop_t, locationmode = 'australia') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g_
)
plot_geo(pop_t, locationmode = 'australia-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g_
)
plot_geo(pop_t, locationmode = 'Australia-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g_
)
plot_geo(pop_t, locationmode = 'AUS-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
)
plot_geo(pop_t, locationmode = 'AUS') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
)
plot_geo(pop_t, locationmode = 'USA-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
)
g_ <- list(
scope = 'australia',
projection = 'Equirectangular-AUS'
)
plot_geo(pop_t, locationmode = 'AUS-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
)
g_ <- list(
scope = 'australia',
projection = 'Equirectangular aus'
)
plot_geo(pop_t, locationmode = 'AUS-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
)
g_ <- list(
scope = 'asia',
projection = 'Equirectangular'
)
plot_geo(pop_t, locationmode = 'AUS-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
)
plot_geo(pop_t, locationmode = 'AUS-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>% layout(
title = 'stuff',
geo = g_
)
g_ <- list(
scope = 'australia',
projection = 'Equirectangular'
)
plot_geo(pop_t, locationmode = 'AUS-states') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>% layout(
title = 'stuff',
geo = g_
)
g_ <- list(
scope = 'world',
projection = 'Equirectangular'
)
plot_geo(pop_t, locationmode = 'AUS') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>% layout(
title = 'stuff',
geo = g_
)
View(states_)
View(pop_t)
pop_t[,1] <- C("NSW","VIC","QLD","SA","TAS","NT","ACT")
pop_t[,1] <- c("NSW","VIC","QLD","SA","TAS","NT","ACT")
View(pop_t)
pop_t[,1] <- c("NSW","VIC","QLD","SA","WA","TAS","NT","ACT","AUS")
g_ <- list(
scope = 'world',
projection = 'Equirectangular'
)
plot_geo(pop_t, locationmode = 'AUS') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>% layout(
title = 'stuff',
geo = g_
)
pop_t <- pop_t[-nrow(pop_t),]
View(pop_t)
g_ <- list(
scope = 'world',
projection = 'Equirectangular'
)
plot_geo(pop_t, locationmode = 'AUS') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>% layout(
title = 'stuff',
geo = g_
)
l_ <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g_ <- list(
scope = 'world',
projection = 'Equirectangular',
showl
)
plot_geo(pop_t, locationmode = 'AUS') %>%
add_trace(
z = pop_t$`2005`, locations = pop_t$STATE,
color = pop_t$`2006`, colors = 'Purples'
) %>% layout(
title = 'stuff',
geo = g_
)
install.packages("leaflet")
View(pop_t)
runApp()
