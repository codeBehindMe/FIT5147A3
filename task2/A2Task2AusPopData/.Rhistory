fortify(aus_shp)
color = 'gray', fill = 'white', size = .2)
aes(x = long, y = lat, group = group), fill = 'white', size = .2)
aes(x = long, y = lat, group = group))
map <- ggplot() +
geom_path(data = shp_df,
aes(x = long, y = lat, group = group))
shp_df <- fortify(aus_shp)
map <- ggplot() +
geom_path(data = shp_df,
aes(x = long, y = lat, group = group))
print(map)
print(map)
shp_m_df <- fortify(m_)
map <- ggplot() +
geom_path(data = shp_m_df,
aes(x = long, y = lat, group = group))
print(map)
m_@data
shp_df <- fortify(aus_shp)
m_ merge(shp_df,mapD_,by="NAME_1")
m_ <-  merge(shp_df,mapD_,by="NAME_1")
View(mapD_)
shp_df <- aus_shp
shp_df@data$ID_1 <- rowname(shp_df@data)
shp_df@data$ID_1 <- rownames(shp_df@data)
shp_df <- join(shp_df,shp_df@data,by = "ID_1")
install.packages("plyr")
install.packages("plyr")
require(plyr)
shp_df <- join(shp_df,shp_df@data,by = "ID_1")
??join
library(maps)
library(mapdata)
library(sp)
require(plyr)
aus<-map("worldHires", "Australia", fill=TRUE, xlim=c(110,160),
ylim=c(-45,-5), mar=c(0,0,0,0))
library(shapefiles)
aus_shp <- readShapeSpatial("AUS_adm1.shp")
plot(aus_shp)
mapD_ <- getMapData()
m_ <- merge(aus_shp,mapD_,by="NAME_1")
shp_df <- fortify(aus_shp)
View(shp_df)
m_@data
View(shp_df)
muni <- readShapeSpatial("AUS_adm1.shp")
muni@data$id <- rownames(muni@data)
muni.df <- fortify(muni)
??join
join
join()
muni.df <- merge(muni.df,muni@data,by = "id")
View(muni.df)
muni.df <- merge(muni.df,mapD_,by.x = "NAME_1",by.y="NAME_1",all.x=T,all.y=F)
View(muni.df)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group))
map <- map + geom_polygon(aes(FILL=`2005`))
map <- map + geom_polygon(aes(fill=`2005`))
print(map)
View(muni.df)
map <- map + geom_polygon(aes(fill=2005))
print(map)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group))
map <- map + geom_path(color = 'grey',linestyle = 2)
print(map)
map <- map + geom_polygon(aes(fill=LEVEL))
print(map)
map <- map + geom_polygon(aes(fill='blue'))
print(map)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group))
map <- map + geom_polygon(aes(fill='blue'))
print(map)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group,fill='blue'))
aes(x = long, y = lat, group = group)) + geom_polygon()
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group)) + geom_polygon()
print(map)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group)) + geom_polygon(aes(fill=muni.df$`2015`))
print(map)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group)) + geom_polygon(aes(x = long, y = lat,fill=muni.df$`2015`))
print(map)
map <- ggplot() +
geom_path(data = muni.df,
aes(x = long, y = lat, group = group)) + geom_polygon(aes(x = muni.df$long, y = muni.df$lat,fill=muni.df$`2015`))
print(map)
map <- ggplot() +
geom_path(data = shp_df,
aes(x = long, y = lat, group = group))
print(map)
aes(x = long, y = lat, group = group)) + geom_polygon(aes(fill = 'blue'))
map <- ggplot() +
geom_path(data = shp_df,
aes(x = long, y = lat, group = group)) + geom_polygon(aes(fill = 'blue'))
print(map)
aes(x = long, y = lat, group = group)) + geom_polygon(aes(data=shp_df, fill = 'blue'))
map <- ggplot() +
geom_path(data = shp_df,
aes(x = long, y = lat, group = group)) + geom_polygon(aes(data=shp_df, fill = 'blue'))
map <- ggplot() +
geom_path(data = shp_df,
aes(x = long, y = lat, group = group)) + geom_polygon(aes(x = shp_df$long,y = shp_df$lat, fill = 'blue'))
print(map)
install.packages("leaflet")
require(leaflet)
lfm_ <- leaflet() %>% setView(lng = 145.0431, lat = -37.8773, zoom = 15) %>% addTiles()
lfm_
setwd("C:/Users/aaron/OneDrive/Documents/Monash Data Science/Data Visualisation/leaflet")
m
source('C:/Users/aaron/OneDrive/Documents/Monash Data Science/Data Visualisation/leaflet/trial.r')
require(leaflet)
m <- leaflet() %>%
setView(lng = 145.0431, lat = -37.8773, zoom = 15) %>%
addTiles()
m
m %>% addProviderTiles("Stamen.Toner")
list.fils()
list.files()
dt_ <- read.csv("vet_schools_in_victoria.txt")
dt_ <- read.csv("vet_schools_in_victoria.txt")
View(dt_)
leaflet(data = dt_[1:30,]) %>% addTiles() %>% addMarkers(~longitude,~lattitude, popup= ~ as.character(location))
leaflet(data = dt_[1:30,]) %>% addTiles() %>% addMarkers(~longitude,~latitude, popup= ~ as.character(location))
leaflet(data = dt_[1:30,]) %>% addTiles() %>% addMarkers(~longitude,~latitude, popup= ~ as.character(location), clusterOptions = markerOptions())
list.files()
dt_ <- read.csv("Household-heating-by-State-2008.csv",header = TRUE)
View(dt_)
names(data)[4] <- "MobileHomes"
agg_ <- aggregate(MobileHomes ~ States, FUN = mean, data = dt_)
names(data)[4] <- "MobileHomes"
names(dt_)[4] <- "MobileHomes"
agg_ <- aggregate(MobileHomes ~ States, FUN = mean, data = dt_)
View(agg_)
agg_$States <- tolower(agg_$States)
View(agg_)
require(maps)
mapStates <- map("state",fill=TRUE,plot=FALSE)
??map
?map
rates <- agg_$MobileHomes[match(mapStates$names,agg_$States)]
cPal_ <- colorNumeric("Blues",rates)
require(plyr)
install.packages("plyr")
cPal_ <- colorNumeric("Blues",rates)
leaflet(mapStates) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity = 1, color = ~ cpal(rates))
leaflet(mapStates) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity = 1, color = ~ cpal_(rates))
leaflet(mapStates) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity = 1, color = ~ cpal_)
leaflet(mapStates) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity = 1, color = ~ cPal_(rates))
setwd("C:/Users/aaron/OneDrive/Documents/Monash Data Science/Data Visualisation/FIT5147A3/task2/A2Task2AusPopData")
mapD_ <- getMapData()
mapD_ <- getMapData()
getMapData <- function(){
# This function gets the data for the map
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:13]
# Rescale to get pop density
pop_mtx <- sweep(as.matrix(cln_[,2:12]),MARGIN = 2,as.vector(unlist(cln_[,13])),FUN = "/")
# cbind colnames
pop_mtx <- as.data.frame(pop_mtx)
pop_t <- cbind(pop_[,1],pop_mtx)
colnames(pop_t) <- c("NAME_1",seq(2005,2015,1))
# pop_t[,1] <- c("NSW","VIC","QLD","SA","WA","TAS","NT","ACT","AUS")
# pop_t <- pop_t[-nrow(pop_t),]
return (pop_t)
}
mapD_ <- getMapData()
View(mapD_)
getMapData <- function(){
# This function gets the data for the map
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:13]
# Rescale to get pop density
pop_mtx <- sweep(as.matrix(cln_[,2:12]),MARGIN = 2,as.vector(unlist(cln_[,13])),FUN = "/")
# cbind colnames
pop_mtx <- as.data.frame(pop_mtx)
pop_t <- cbind(pop_[,1],pop_mtx)
colnames(pop_t) <- c("NAME_1",seq(2005,2015,1))
# pop_t[,1] <- c("NSW","VIC","QLD","SA","WA","TAS","NT","ACT","AUS")
pop_t <- pop_t[-nrow(pop_t),]
return (pop_t)
}
mapD_ <- getMapData()
View(mapD_)
dt_m <- mapD_[,1:2]
View(dt_m)
dt_m$NAME_1 <- tolower(dt_m$NAME_1)
mapStates <- map("state",fill=TRUE,plot=FALSE)
rt_ <- dt_m$NAME_1[match(mapStates$names,dt_m$NAME_1)]
help(package='maps')
install.packages("oz")
?oz
??oz
require(oz)
ozStates <- oz()
ozStates <- oz(plot=FALSE)
warnings()
rates <- agg_$MobileHomes[match(mapStates$names,agg_$States)]
oz()
ozStates <- ozRegion()
leaflet(ozStates)
?oz
leaflet(data = dt_m)
leaflet(data = ozStates)
install.packages("rgdal")
setwd("C:/Users/aaron/OneDrive/Documents/Monash Data Science/Data Visualisation/FIT5147A3/task2/A2Task2AusPopData")
source("serverSideMethods.R")
source("serverSideMethods.R")
require(rgdal)
aus_map <- readOGR(".","AUS_adm1")
aus_map$NAME_0
aus_map$NAME_1
pop_ <- mapD_$`2005`[match(aus_map$NAME_1,mapD_$NAME_1)]
require(leaflet)
qpal <- colorQuantile("Blues", rates, 12)
?colorQuantile
qpal <- colorQuantile("Blues", pop_, 12)
leaflet(aus_map)
map("australia")
leaflet("australia")
leaflet(aus_map) %>% addTiles()
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(pop_))
aus_map <- readOGR(".","AUS_adm1")
pop_ <- mapD_$`2005`[match(aus_map$NAME_1,mapD_$NAME_1)]
qpal <- colorQuantile("Blues", pop_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(pop_))
aus_map <- readOGR(".","AUS_adm1")
pop_ <- mapD_$`2006`[match(aus_map$NAME_1,mapD_$NAME_1)]
qpal <- colorQuantile("Blues", pop_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(pop_))
shiny::runApp()
dt_ <- getTimeSeriesData()
View(dt_)
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:13]
View(cln_)
6693206 / 800808.8
4989246/227495.7
dt_m <- getMapData()
getMapData <- function(){
# This function gets the data for the map
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:13]
# Rescale to get pop density
pop_mtx <- sweep(as.matrix(cln_[,2:12]),MARGIN = 2,as.vector(unlist(cln_[,13])),FUN = "/")
# cbind colnames
pop_mtx <- as.data.frame(pop_mtx)
pop_t <- cbind(pop_[,1],pop_mtx)
colnames(pop_t) <- c("NAME_1",seq(2005,2015,1))
# pop_t[,1] <- c("NSW","VIC","QLD","SA","WA","TAS","NT","ACT","AUS")
pop_t <- pop_t[-nrow(pop_t),]
return (pop_t)
}
dt_m <- getMapData()
View(dt_m)
area_ <- cln_[,ncol(cln_)]
View(area_)
area_ <- unlist(cln_[,ncol(cln_)])
area_ <- unlist(as.numeric(cln_[,ncol(cln_)]))
area_ <- unlist(cln_[,ncol(cln_)])
View(area_)
area_[1,]
area_[1]
unlist(area_)
as.matrix(area_)
names(area_) <- NULL
area_
names(area_) <- NULL
pop_mtx <- sweep(as.matrix(cln_[,2:12]),MARGIN = 2,area_,FUN = "/")
View(pop_mtx)
1.050350e+02
View(orig_)
pop_ <- cln_[,1:12]
View(pop_)
pop_ <- as.matrix(cln_[,1:12])
View(orig_)
View(pop_)
pop_mtx <- sweep(pop_,MARGIN = 2,area_,FUN = "/")
View(dt_m)
View(orig_)
7144292/800808.8
View(pop_)
pop_[1,1]
pop_[,2]/area_
pop_[1,2]/area_[1]
pop_[1,2]
as.numeric(pop_[1,2])
as.numeric(pop_[,2])
pop+[,2]/area_
pop_[,2]/area_
area_
class(pop_[,2])
as.numeric(pop_[,2])/area_
as.numeric(pop_[,23])/area_
as.numeric(pop_[,3])/area_
for(i in 1:ncol(pop_)){
if(i != 1){
# for(r in 1:nrow(pop_)){
#   pop_[r,i] <- pop_[r,i]/area_[r]
# }
pop_[,i] <- as.numeric(pop_[,i])/area_
}
}
View(pop_)
pop_mtx <- pop_
getMapData <- function(){
# This function gets the data for the map
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:13]
area_ <- unlist(cln_[,ncol(cln_)])
names(area_) <- NULL
pop_ <- as.matrix(cln_[,1:12])
# Rescale to get pop density
pop_mtx <- sweep(pop_,MARGIN = 2,area_,FUN = "/")
for(i in 1:ncol(pop_)){
if(i != 1){
# for(r in 1:nrow(pop_)){
#   pop_[r,i] <- pop_[r,i]/area_[r]
# }
pop_[,i] <- as.numeric(pop_[,i])/area_
}
}
# pop_mtx <- pop_
# cbind colnames
# pop_mtx <- as.data.frame(pop_mtx)
# pop_t <- cbind(pop_[,1],pop_mtx)
# colnames(pop_t) <- c("NAME_1",seq(2005,2015,1))
# # pop_t[,1] <- c("NSW","VIC","QLD","SA","WA","TAS","NT","ACT","AUS")
#
# pop_t <- pop_t[-nrow(pop_t),]
return (pop_)
}
dt_m <- getMapData()
getMapData <- function(){
# This function gets the data for the map
# Read in the excel file.
orig_ <-
readxl::read_excel("Programming Profolio Task 2 Data.xlsx")
cln_ <- orig_[1:9, 1:14]
# Get rid of the NA column just before the end.
cln_ <- cln_[, -13]
# We should reshape this data into a more "logical" format.
# Lets first make two context files. Since area doesn't really make sense in a population context.
pop_ <- cln_[, 1:13]
area_ <- unlist(cln_[,ncol(cln_)])
names(area_) <- NULL
pop_ <- as.matrix(cln_[,1:12])
# Rescale to get pop density
# pop_mtx <- sweep(pop_,MARGIN = 2,area_,FUN = "/")
for(i in 1:ncol(pop_)){
if(i != 1){
# for(r in 1:nrow(pop_)){
#   pop_[r,i] <- pop_[r,i]/area_[r]
# }
pop_[,i] <- as.numeric(pop_[,i])/area_
}
}
# pop_mtx <- pop_
# cbind colnames
# pop_mtx <- as.data.frame(pop_mtx)
# pop_t <- cbind(pop_[,1],pop_mtx)
# colnames(pop_t) <- c("NAME_1",seq(2005,2015,1))
# # pop_t[,1] <- c("NSW","VIC","QLD","SA","WA","TAS","NT","ACT","AUS")
#
# pop_t <- pop_t[-nrow(pop_t),]
return (pop_)
}
dt_m <- getMapData()
View(dt_m)
View(dt_m)
colnames(pop_) <- c("NAME_1",seq(2005,2015,1))
View(pop_)
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
View(dt_)
class(dt_)
dt_ <- as.data.frame(dt_)
View(dt_)
var_ <- dt_$`2005.0`[match(aus_map$NAME_1,dt_$`State/Territory`)]
qpal <- colorQuantile("Blues", pop_, 12)
qpal <- colorQuantile("Blues", dt_, 12)
qpal <- colorQuantile("Blues", var_, 12)
View(dt_)
source('C:/Users/aaron/OneDrive/Documents/Monash Data Science/Data Visualisation/FIT5147A3/task2/A2Task2AusPopData/serverSideMethods.R')
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
View(dt_)
var_ <- dt_$`2005`[match(aus_map$NAME_1,dt_$NAME_1)]
qpal <- colorQuantile("Blues", var_, 12)
var_ <- as.numeric(dt_$`2005`[match(aus_map$NAME_1,dt_$NAME_1)])
qpal <- colorQuantile("Blues", var_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
runApp()
runApp()
runApp()
View(dt_)
runApp()
runApp()
runApp()
runApp()
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
var_ <- as.numeric(dt_$`2005`[match(aus_map$NAME_1,dt_$NAME_1)])
qpal <- colorQuantile("Blues", var_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
var_ <- as.numeric(dt_[,2][match(aus_map$NAME_1,dt_$NAME_1)])
qpal <- colorQuantile("Blues", var_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
var_ <- as.numeric(dt_[,7][match(aus_map$NAME_1,dt_$NAME_1)])
qpal <- colorQuantile("Blues", var_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
var_ <- as.numeric(dt_[,6][match(aus_map$NAME_1,dt_$NAME_1)])
var_ <- as.numeric(dt_[,3][match(aus_map$NAME_1,dt_$NAME_1)])
unique(var_)
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
var_ <- as.numeric(dt_[,3][match(aus_map$NAME_1,dt_$NAME_1)])
qpal <- colorQuantile("Blues", var_, 9)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
dt_[,3]
dt_ <- as.numeric(dt_)
dt_[,2:ncol(dt_)] <- as.numeric(dt_[,2:ncol(dt_)])
str(dt_)
dt_[,2:ncol(dt_)] <- sapply(dt_[,1:ncol(dt_)],as.numeric)
str(dt_)
dt_ <- getMapData()
dt_[,2:ncol(dt_)] <- sapply(dt_[,1:ncol(dt_)],as.double)
str(dt_)
dt_ <- getMapData()
dt_[,2:ncol(dt_)] <- sapply(dt_[,1:ncol(dt_)],as.character)
str(dt_)
dt_[,2:ncol(dt_)] <- sapply(dt_[,1:ncol(dt_)],as.double)
str(dt_)
dt_ <- getMapData()
dt_[,2:ncol(dt_)] <- sapply(dt_[,2:ncol(dt_)],as.character)
dt_[,2:ncol(dt_)] <- sapply(dt_[,2:ncol(dt_)],as.double)
str(dt_)
aus_map <- readOGR(".","AUS_adm1")
pop_ <- mapD_$`2006`[match(aus_map$NAME_1,mapD_$NAME_1)]
qpal <- colorQuantile("Blues", pop_, 12)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(pop_))
# Using leaflet
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
dt_[,2:ncol(dt_)] <- sapply(dt_[,2:ncol(dt_)],as.character)
dt_[,2:ncol(dt_)] <- sapply(dt_[,2:ncol(dt_)],as.double)
aus_map <- readOGR(".","AUS_adm1")
dt_ <- getMapData()
dt_[,2:ncol(dt_)] <- sapply(dt_[,2:ncol(dt_)],as.character)
dt_[,2:ncol(dt_)] <- sapply(dt_[,2:ncol(dt_)],as.double)
var_ <- as.numeric(dt_[,3][match(aus_map$NAME_1,dt_$NAME_1)])
var_ <- dt_[,3][match(aus_map$NAME_1,dt_$NAME_1)]
qpal <- colorQuantile("Blues", var_, 9)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
var_ <- dt_[,2][match(aus_map$NAME_1,dt_$NAME_1)]
qpal <- colorQuantile("Blues", var_, 9)
leaflet(aus_map) %>% addTiles() %>% addPolygons(stroke = F, smoothFactor = 0.2, fillOpacity=1,color = qpal(var_))
var_
var_ <- dt_[,3][match(aus_map$NAME_1,dt_$NAME_1)]
var_
runApp()
